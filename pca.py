# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yY_V3OPywrbrTcUx-4jMvGpu0UxIuTps
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import load_iris

data = load_iris()
df = pd.DataFrame(data.data, columns=data.feature_names)

print(df)

x = df["sepal length (cm)"]
y = df["sepal width (cm)"]

plt.figure(figsize=(6,6))
plt.xlabel('sepal length(cm)')
plt.ylabel('sepal width(cm)')
plt.title('sepal length vs width')
plt.plot(x,y, ".")
plt.show()

x = df["sepal length (cm)"]
y = df["petal length (cm)"]

plt.figure(figsize=(6,6))
plt.xlabel('sepal length(cm)')
plt.ylabel('petal length(cm)')
plt.title('sepal length vs petal length')
plt.plot(x,y, ".")
plt.show()

x = df["sepal length (cm)"]
y = df["petal width (cm)"]

plt.figure(figsize=(6,6))
plt.xlabel('sepal length(cm)')
plt.ylabel('petal width(cm)')
plt.title('sepal length vs petal width')
plt.plot(x,y, ".")
plt.show()

x = df["petal length (cm)"]
y = df["sepal width (cm)"]

plt.figure(figsize=(6,6))
plt.xlabel('petal length(cm)')
plt.ylabel('sepal width(cm)')
plt.title('petal length vs sepal width')
plt.plot(x,y, ".")
plt.show()

x = df["petal width (cm)"]
y = df["sepal width (cm)"]

plt.figure(figsize=(6,6))
plt.xlabel('petal width(cm)')
plt.ylabel('sepal width(cm)')
plt.title('petal width vs sepal width')
plt.plot(x,y, ".")
plt.show()

x = df["petal length (cm)"]
y = df["petal width (cm)"]

plt.figure(figsize=(6,6))
plt.xlabel('petal length(cm)')
plt.ylabel('petal width(cm)')
plt.title('petal length vs petal width')
plt.plot(x,y, ".")
plt.show()

x = df["sepal length (cm)"]
fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(x, range=(4,8), bins=50, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'Sepal Length(cm)', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)

x = df["sepal width (cm)"]
fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(x, range=(2,4.5), bins=50, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'Sepal Width(cm)', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)

x = df["petal length (cm)"]
fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(x, range=(1,7), bins=50, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'Petal Length(cm)', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)

x = df["petal width (cm)"]
fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(x, range=(0,2.5), bins=50, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'Petal Width(cm)', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)

def standardised(x):
  u=np.sum(x)/149
  V=np.sum((x-u)**2)/149
  o=np.sqrt(V)
  xi = (x - u)/o
  return xi

x = df["sepal length (cm)"]
t = df["sepal width (cm)"]
y = df["petal length (cm)"]
z = df["petal width (cm)"]
xi = standardised(x)
ti = standardised(t)
yi = standardised(y)
zi = standardised(z)

sdf = standardised(df)
print(sdf)

plt.figure(figsize=(6,6))
plt.xlabel('sepal length(cm)')
plt.ylabel('petal length(cm)')
plt.title('(standardised)sepal length vs petal length')
plt.plot(xi,zi, ".")
plt.show()

def covariance(x,y):
  ux=np.sum(x)/149
  uy=np.sum(y)/149
  Cov=np.sum((x-ux)*(y-uy))/149
  return Cov

x = df["sepal length (cm)"]
t = df["sepal width (cm)"]
y = df["petal length (cm)"]
z = df["petal width (cm)"]
covxx = covariance(x,x)
covxt = covariance(x,t)
covxy = covariance(x,y)
covxz = covariance(x,z)
covyx = covariance(y,x)
covyt = covariance(y,t)
covyy = covariance(y,y)
covyz = covariance(y,z)
covtx = covariance(t,x)
covtt = covariance(t,t)
covty = covariance(t,y)
covtz = covariance(t,z)
covzx = covariance(z,x)
covzt = covariance(z,t)
covzy = covariance(z,y)
covzz = covariance(z,z)
cx = (covxx,covxt,covxy,covxz)
ct = (covtx,covtt,covty,covtz)
cy = (covyx,covyt,covyy,covyz)
cz = (covzx,covzt,covzy,covzz)
Cov_list = (cx,ct,cy,cz)

Cov = np.asarray(Cov_list)
print(Cov)

test_matrix = np.zeros((4,4))
test_matrix[0,0] = covxx
test_matrix[0,1] = covxt
test_matrix[0,2] = covxy
test_matrix[0,3] = covxz
test_matrix[1,0] = covtx
test_matrix[1,1] = covtt
test_matrix[1,2] = covty
test_matrix[1,3] = covtz
test_matrix[2,0] = covyx
test_matrix[2,1] = covyt
test_matrix[2,2] = covyy
test_matrix[2,3] = covyz
test_matrix[3,0] = covzx
test_matrix[3,1] = covzt
test_matrix[3,2] = covzy
test_matrix[3,3] = covzz
print(test_matrix)

xi = standardised(x)
ti = standardised(t)
yi = standardised(y)
zi = standardised(z)
covxxi = covariance(xi,xi)
covxti = covariance(xi,ti)
covxyi = covariance(xi,yi)
covxzi = covariance(xi,zi)
covyxi = covariance(yi,xi)
covyti = covariance(yi,ti)
covyyi = covariance(yi,yi)
covyzi = covariance(yi,zi)
covtxi = covariance(ti,xi)
covtti = covariance(ti,ti)
covtyi = covariance(ti,yi)
covtzi = covariance(ti,zi)
covzxi = covariance(zi,xi)
covzti = covariance(zi,ti)
covzyi = covariance(zi,yi)
covzzi = covariance(zi,zi)
cxi = (covxxi,covxti,covxyi,covxzi)
cti = (covtxi,covtti,covtyi,covtzi)
cyi = (covyxi,covyti,covyyi,covyzi)
czi = (covzxi,covzti,covzyi,covzzi)
Cov_listi = (cxi,cti,cyi,czi)

Covi = np.asarray(Cov_listi)
print(Covi)

test_matrixi = np.zeros((4,4))
test_matrixi[0,0] = covxxi
test_matrixi[0,1] = covxti
test_matrixi[0,2] = covxyi
test_matrixi[0,3] = covxzi
test_matrixi[1,0] = covtxi
test_matrixi[1,1] = covtti
test_matrixi[1,2] = covtyi
test_matrixi[1,3] = covtzi
test_matrixi[2,0] = covyxi
test_matrixi[2,1] = covyti
test_matrixi[2,2] = covyyi
test_matrixi[2,3] = covyzi
test_matrixi[3,0] = covzxi
test_matrixi[3,1] = covzti
test_matrixi[3,2] = covzyi
test_matrixi[3,3] = covzzi
print(test_matrixi)

from numpy.linalg import eig

eigenvalue,eigenvector=eig(Cov)

print('Eigenvalues:', eigenvalue)
print('Eigenvectors:', eigenvector)

from numpy.linalg import eig

eigenvalues,eigenvectors=eig(Covi)

print('Eigenvalues:', eigenvalues)
print('Eigenvectors:', eigenvectors)

magnitudes=[]
for i in range(len(eigenvectors)):
  magnitude_i = 0
  for j in range(len(eigenvectors[i])):
    coefficient_ij = eigenvectors[i,j]
    magnitude_i = magnitude_i+(coefficient_ij**2)
  magnitudes.append(np.sqrt(magnitude_i))
print('List of the magnitudes of the eigenvectors:', magnitudes)

def sort_eigens(eigenvalues, eigenvectors):
  df_eigen = pd.DataFrame(eigenvectors)
  df_eigen['Eigenvalues'] = eigenvalues
  df_eigen.sort_values("Eigenvalues", inplace=True, ascending=False)
  global sorted_eigenvectors
  sorted_eigenvalues = np.array(df_eigen['Eigenvalues'])
  sorted_eigenvectors = np.array(df_eigen.drop(columns="Eigenvalues"))
  return sorted_eigenvalues, sorted_eigenvectors

def reorient_data(sdf,eigenvectors):
  numpy_data = np.array(sdf)
  pca_features = np.dot(numpy_data, eigenvectors)
  global pca_df
  pca_df = pd.DataFrame(pca_features)
  #return pca_df

reorient_data(sdf,eigenvectors)

x = pca_df[0]
t = pca_df[1]
y = pca_df[2]
z = pca_df[3]

print(pca_df)

plt.figure(figsize=(6,6))
plt.xlabel('PC_0')
plt.ylabel('PC_1')
plt.title('PC_1 vs PC_0')
plt.plot(x,t, ".")
plt.show()

plt.figure(figsize=(6,6))
plt.xlabel('PC_0')
plt.ylabel('PC_2')
plt.title('PC_2 vs PC_0')
plt.plot(x,y, ".")
plt.show()

plt.figure(figsize=(6,6))
plt.xlabel('PC_0')
plt.ylabel('PC_3')
plt.title('PC_3 vs PC_0')
plt.plot(x,z, ".")
plt.show()

plt.figure(figsize=(6,6))
plt.xlabel('PC_1')
plt.ylabel('PC_2')
plt.title('PC_2 vs PC_1')
plt.plot(t,y, ".")
plt.show()

plt.figure(figsize=(6,6))
plt.xlabel('PC_1')
plt.ylabel('PC_3')
plt.title('PC_3 vs PC_1')
plt.plot(t,z, ".")
plt.show()

plt.figure(figsize=(6,6))
plt.xlabel('PC_2')
plt.ylabel('PC_3')
plt.title('PC_3 vs 2')
plt.plot(y,z, ".")
plt.show()

fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(x, range=(-3,3), bins=75, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'PC_0', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)

fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(t, range=(-3,3), bins=75, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'PC_1', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)

fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(y, range=(-1,1), bins=75, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'PC_2', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)

fig1 = plt.figure()
ax = fig1.add_subplot()
counts, bins, _ = ax.hist(z, range=(-0.5,0.5), bins=75, facecolor = 'lightblue', edgecolor='black', linewidth=0.5 )
ax.tick_params(axis='both',  labelsize=12)
ax.set_xlabel(r'PC_3', fontsize=15)
ax.set_ylabel(r'Amount', fontsize=15)